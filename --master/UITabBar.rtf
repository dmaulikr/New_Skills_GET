{\rtf1\ansi\ansicpg936\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red170\green13\blue145;
\red28\green0\blue207;\red255\green173\blue23;\red0\green116\blue0;\red92\green38\blue153;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17680\viewh8400\viewkind0
\deftab674
\pard\tx674\pardeftab674\pardirnatural

\f0\fs28 \cf2 \CocoaLigature0 #import \cf3 <Foundation/Foundation.h>\cf2 \
#import \cf3 <UIKit/UIKitDefines.h>\cf2 \
#import \cf3 <UIKit/UIControl.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 NS_ENUM\cf0 (NSInteger, UITabBarItemPositioning) \{\
    UITabBarItemPositioningAutomatic,\
    UITabBarItemPositioningFill,\
    UITabBarItemPositioningCentered,\
\} \cf2 NS_ENUM_AVAILABLE_IOS\cf0 (\cf5 7\cf0 _0);\
\
\cf4 @class\cf0  \cf6 UITabBarItem\cf0 ;\
\cf4 @class\cf0  \cf6 UIImageView\cf0 ;\
\cf4 @protocol\cf0  \cf6 UITabBarDelegate\cf0 ;\
\
\cf2 NS_CLASS_AVAILABLE_IOS\cf0 (\cf5 2\cf0 _0) \cf4 @interface\cf0  UITabBar : \cf6 UIView\cf0 \
\
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 assign\cf0 ) \cf4 id\cf0 <\cf6 UITabBarDelegate\cf0 > delegate;     \cf7 // weak reference. default is nil\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 copy\cf0 )   \cf6 NSArray\cf0              *items;        \cf7 // get/set visible UITabBarItems. default is nil. changes not animated. shown in order\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 assign\cf0 ) \cf6 UITabBarItem\cf0         *selectedItem; \cf7 // will show feedback based on mode. default is nil\cf0 \
\
- (\cf4 void\cf0 )setItems:(\cf6 NSArray\cf0  *)items animated:(\cf4 BOOL\cf0 )animated;   \cf7 // will fade in or out or reorder and adjust spacing\cf0 \
\
\cf7 // Reorder items. This will display a sheet with all the items listed, allow the user to change/reorder items and shows a 'Done' button at the top\cf0 \
\
- (\cf4 void\cf0 )beginCustomizingItems:(\cf6 NSArray\cf0  *)items;   \cf7 // list all items that can be reordered. always animates a sheet up. visible items not listed are fixed in place\cf0 \
- (\cf4 BOOL\cf0 )endCustomizingAnimated:(\cf4 BOOL\cf0 )animated;    \cf7 // hide customization sheet. normally you should let the user do it. check list of items to see new layout. returns YES if layout changed\cf0 \
- (\cf4 BOOL\cf0 )isCustomizing;\
\
\cf7 /*\
 The behavior of tintColor for bars has changed on iOS 7.0. It no longer affects the bar's background\
 and behaves as described for the tintColor property added to UIView.\
 To tint the bar's background, please use -barTintColor.\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 retain\cf0 ) \cf6 UIColor\cf0  *tintColor \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 5\cf0 _0);\
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 retain\cf0 ) \cf6 UIColor\cf0  *barTintColor \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 7\cf0 _0) \cf2 UI_APPEARANCE_SELECTOR\cf0 ;  \cf7 // default is nil\cf0 \
\
\cf7 /* selectedImageTintColor will be applied to the gradient image used when creating the\
 selected image. Default is nil and will result in the system bright blue for selected\
 tab item images. If you wish to also customize the unselected image appearance, you must\
 use the image and selectedImage properties on UITabBarItem along with UIImageRenderingModeAlways\
 \
 Deprecated in iOS 8.0. On iOS 7.0 and later the selected image takes its color from the\
 inherited tintColor of the UITabBar, which may be set separately if necessary.\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 retain\cf0 ) \cf6 UIColor\cf0  *selectedImageTintColor \cf2 NS_DEPRECATED_IOS\cf0 (\cf5 5\cf0 _0,\cf5 8\cf0 _0,\cf3 "Use tintColor"\cf0 ) \cf2 UI_APPEARANCE_SELECTOR\cf0 ;\
\
\cf7 /* The background image will be tiled to fit, even if it was not created via the UIImage resizableImage methods.\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 retain\cf0 ) \cf6 UIImage\cf0  *backgroundImage \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 5\cf0 _0) \cf2 UI_APPEARANCE_SELECTOR\cf0 ;\
\
\cf7 /* The selection indicator image is drawn on top of the tab bar, behind the bar item icon.\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 retain\cf0 ) \cf6 UIImage\cf0  *selectionIndicatorImage \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 5\cf0 _0) \cf2 UI_APPEARANCE_SELECTOR\cf0 ; \
\
\cf7 /* Default is nil. When non-nil, a custom shadow image to show instead of the default shadow image. For a custom shadow to be shown, a custom background image must also be set with -setBackgroundImage: (if the default background image is used, the default shadow image will be used).\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 retain\cf0 ) \cf6 UIImage\cf0  *shadowImage \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 6\cf0 _0) \cf2 UI_APPEARANCE_SELECTOR\cf0 ;\
\
\cf7 /*\
 Default is UITabBarItemPositioningAutomatic. The tab bar items fill horizontally\
 for the iPhone user interface idiom, and are centered with a default width and \
 inter-item spacing (customizable with the itemWidth and itemSpacing\
 properties) for the iPad idiom. When the tab bar is owned by a UITabBarController\
 further heuristics may determine the positioning for UITabBarItemPositioningAutomatic.\
    Use UITabBarItemPositioningFill to force the items to fill horizontally.\
    Use UITabBarItemPositioningCenter to force the items to center with a default\
 width (or the itemWidth, if set).\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ) \cf8 UITabBarItemPositioning\cf0  itemPositioning \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 7\cf0 _0) \cf2 UI_APPEARANCE_SELECTOR\cf0 ;\
\
\cf7 /*\
 Set the itemWidth to a positive value to be used as the width for tab bar items\
 when they are positioned as a centered group (as opposed to filling the tab bar).\
 Default of 0 or values less than 0 will be interpreted as a system-defined width.\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ) \cf8 CGFloat\cf0  itemWidth \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 7\cf0 _0) \cf2 UI_APPEARANCE_SELECTOR\cf0 ;\
\
\cf7 /*\
 Set the itemSpacing to a positive value to be used between tab bar items\
 when they are positioned as a centered group.\
 Default of 0 or values less than 0 will be interpreted as a system-defined spacing.\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ) \cf8 CGFloat\cf0  itemSpacing \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 7\cf0 _0) \cf2 UI_APPEARANCE_SELECTOR\cf0 ;\
\
\cf7 /*\
 Valid bar styles are UIBarStyleDefault (default) and UIBarStyleBlack.\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ) \cf8 UIBarStyle\cf0  barStyle \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 7\cf0 _0) \cf2 UI_APPEARANCE_SELECTOR\cf0 ;\
\
\cf7 /*\
 Default is YES.\
 You may force an opaque background by setting the property to NO.\
 If the tab bar has a custom background image, the default is inferred from the alpha\
 values of the image\'97YES if it has any pixel with alpha < 1.0\
 If you send setTranslucent:YES to a tab bar with an opaque custom background image\
 the tab bar will apply a system opacity less than 1.0 to the image.\
 If you send setTranslucent:NO to a tab bar with a translucent custom background image\
 the tab bar will provide an opaque background for the image using the bar's barTintColor if defined, or black\
 for UIBarStyleBlack or white for UIBarStyleDefault if barTintColor is nil.\
 */\cf0 \
\cf4 @property\cf0 (\cf4 nonatomic\cf0 ,\cf4 getter\cf0 =isTranslucent) \cf4 BOOL\cf0  translucent \cf2 NS_AVAILABLE_IOS\cf0 (\cf5 7\cf0 _0);\
\cf4 @end\cf0 \
\
\cf7 //___________________________________________________________________________________________________\cf0 \
\
\cf4 @protocol\cf0  UITabBarDelegate<\cf6 NSObject\cf0 >\
\cf4 @optional\cf0 \
\
- (\cf4 void\cf0 )tabBar:(\cf6 UITabBar\cf0  *)tabBar didSelectItem:(\cf6 UITabBarItem\cf0  *)item; \cf7 // called when a new view is selected by the user (but not programatically)\cf0 \
\
\cf7 /* called when user shows or dismisses customize sheet. you can use the 'willEnd' to set up what appears underneath. \
 changed is YES if there was some change to which items are visible or which order they appear. If selectedItem is no longer visible, \
 it will be set to nil.\
 */\cf0 \
\
- (\cf4 void\cf0 )tabBar:(\cf6 UITabBar\cf0  *)tabBar willBeginCustomizingItems:(\cf6 NSArray\cf0  *)items;                     \cf7 // called before customize sheet is shown. items is current item list\cf0 \
- (\cf4 void\cf0 )tabBar:(\cf6 UITabBar\cf0  *)tabBar didBeginCustomizingItems:(\cf6 NSArray\cf0  *)items;                      \cf7 // called after customize sheet is shown. items is current item list\cf0 \
- (\cf4 void\cf0 )tabBar:(\cf6 UITabBar\cf0  *)tabBar willEndCustomizingItems:(\cf6 NSArray\cf0  *)items changed:(\cf4 BOOL\cf0 )changed; \cf7 // called before customize sheet is hidden. items is new item list\cf0 \
- (\cf4 void\cf0 )tabBar:(\cf6 UITabBar\cf0  *)tabBar didEndCustomizingItems:(\cf6 NSArray\cf0  *)items changed:(\cf4 BOOL\cf0 )changed;  \cf7 // called after customize sheet is hidden. items is new item list\cf0 \
\
\cf4 @end}