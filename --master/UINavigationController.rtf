{\rtf1\ansi\ansicpg936\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset134 STHeitiSC-Light;
}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red100\green56\blue32;\red92\green38\blue153;
\red255\green173\blue23;\red28\green0\blue207;\red0\green116\blue0;\red38\green38\blue38;\red0\green68\blue254;
\red46\green13\blue110;\red196\green26\blue22;\red243\green235\blue0;\red217\green11\blue0;\red63\green105\blue30;
\red59\green16\blue143;\red250\green10\blue15;}
\paperw11900\paperh16840\margl1440\margr1440\vieww24580\viewh15400\viewkind0
\deftab674
\pard\tx674\pardeftab674\pardirnatural

\f0\fs28 \cf2 \CocoaLigature0 typedef\cf0  \cf2 NS_ENUM\cf0 (NSInteger, UINavigationControllerOperation) \{\
    UINavigationControllerOperationNone,\
    UINavigationControllerOperationPush,\
    UINavigationControllerOperationPop,\
\};\
\
\pard\tx674\pardeftab674\pardirnatural
\cf3 UIKIT_EXTERN\cf0  \cf2 const\cf0  \cf4 CGFloat\cf0  UINavigationControllerHideShowBarDuration;\
\
\pard\tx674\pardeftab674\pardirnatural
\cf2 @class\cf0  \cf5 UIView\cf0 , \cf5 UINavigationBar\cf0 , \cf5 UINavigationItem\cf0 , \cf5 UIToolbar\cf0 , \cf5 UILayoutContainerView\cf0 ;\
\cf2 @protocol\cf0  \cf5 UINavigationControllerDelegate\cf0 ;\
\
\
\pard\tx674\pardeftab674\pardirnatural
\cf3 NS_CLASS_AVAILABLE_IOS\cf0 (\cf6 2\cf0 _0) \cf2 @interface\cf0  UINavigationController : \cf5 UIViewController\cf0 \
\
\
\pard\tx674\pardeftab674\pardirnatural
\cf7 /* Use this initializer to make the navigation controller use your custom bar class. \
   Passing nil for navigationBarClass will get you UINavigationBar, nil for toolbarClass gets UIToolbar.\
   The arguments must otherwise be subclasses of the respective UIKit classes.\
 */\cf0 \
- (\cf2 instancetype\cf0 )initWithNavigationBarClass:(Class)navigationBarClass toolbarClass:(Class)toolbarClass \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 5\cf0 _0);\
\
- (\cf2 instancetype\cf0 )initWithRootViewController:(\cf5 UIViewController\cf0  *)rootViewController; \cf7 // Convenience method pushes the root view controller without animation.\cf0 \
\
- (\cf2 void\cf0 )pushViewController:(\cf5 UIViewController\cf0  *)viewController animated:(\cf2 BOOL\cf0 )animated; \cf7 // Uses a horizontal slide transition. Has no effect if the view controller is already in the stack.\cf0 \
\
- (\cf5 UIViewController\cf0  *)popViewControllerAnimated:(\cf2 BOOL\cf0 )animated; \cf7 // Returns the popped controller.\cf0 \
- (\cf5 NSArray\cf0  *)popToViewController:(\cf5 UIViewController\cf0  *)viewController animated:(\cf2 BOOL\cf0 )animated; \cf7 // Pops view controllers until the one specified is on top. Returns the popped controllers.\cf0 \
- (\cf5 NSArray\cf0  *)popToRootViewControllerAnimated:(\cf2 BOOL\cf0 )animated; \cf7 // Pops until there's only a single view controller left on the stack. Returns the popped controllers.\
\pard\pardeftab720\sl500

\f1 \cf8 \cb9 \CocoaLigature1 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx1155\pardeftab1155\pardirnatural

\f0 \cf0 \cb1 \CocoaLigature0  \cf7 //
\f2 \'c9\'e8\'d6\'c3\'b5\'bc\'ba\'bd\'cc\'f5\'ca\'c7\'b7\'f1\'cd\'b8\'c3\'f7
\f0 \cf0 \
    nc.\cf4 navigationBar\cf0 .\cf4 translucent\cf0 =\cf2 NO\cf0 ;\
    \
    \cf7 //
\f2 \'c8\'e7\'b9\'fb\'b5\'bc\'ba\'bd\'cc\'f5\'cd\'b8\'c3\'f7\'a3\'ac\'b6\'d4\'d7\'d3\'ca\'d3\'cd\'bc\'bf\'d8\'d6\'c6\'c6\'f7\'a3\'ac\'c6\'c1\'c4\'bb\'d7\'f3\'c9\'cf\'bd\'c7
\f0 0
\f2 \'a3\'ac
\f0 0
\f2 \'b5\'e3
\f0 \cf0 \
    \cf7 //
\f2 \'c8\'e7\'b9\'fb\'b5\'bc\'ba\'bd\'cc\'f5\'b2\'bb\'cd\'b8\'c3\'f7\'a3\'ac\'b6\'d4\'d7\'d3\'ca\'d3\'cd\'bc\'bf\'d8\'d6\'c6\'c6\'f7\'a3\'ac\'b5\'bc\'ba\'bd\'cc\'f5\'cf\'c2\'b1\'df\'d7\'dd\'d7\'f8\'b1\'ea\'ca\'c7
\f0 0\cf0 \
    \cf7 //
\f2 \'d7\'b4\'cc\'ac\'cc\'f5
\f0 20
\f2 \'b8\'f6\'d7\'f8\'b1\'ea\'b5\'e3\'b8\'df
\f0 \cf0 \
    \cf7 //
\f2 \'b5\'bc\'ba\'bd\'cc\'f5
\f0 44
\f2 \'b8\'f6\'d7\'f8\'b1\'ea\'b5\'e3\'b8\'df\
\pard\tx1155\pardeftab1155\pardirnatural
\cf0 \
\pard\tx1155\pardeftab1155\pardirnatural

\f0 \cf0   \cf7 //
\f2 \'b5\'bc\'ba\'bd\'cc\'f5\'cd\'bc\'c6\'ac\'b8\'df\'b6\'c8\'d5\'fd\'ba\'c3
\f0 44
\f2 \'a3\'ac
\f0 RETINA
\f2 \'c6\'c1\'d5\'fd\'ba\'c3
\f0 88
\f2 \'a3\'ac
\f0 name
\f2 \'b5\'bc\'ba\'bd\'cc\'f5\'cd\'bc\'c6\'ac\'ce\'bb\'d3\'da\'d7\'b4\'cc\'ac\'cc\'f5\'cf\'c2\'b7\'bd
\f0 \cf0 \
    \cf7 //
\f2 \'b5\'bc\'ba\'bd\'cc\'f5\'cd\'bc\'c6\'ac\'b8\'df\'d3\'da\'bb\'f2\'b2\'bb\'d7\'e3
\f0 44
\f2 \'a3\'a8
\f0 88
\f2 \'a3\'a9\'c4\'c4\'c5\'c2\'d2\'bb\'b8\'f6\'cf\'f1\'cb\'d8\'a3\'ac\'cd\'bc\'c6\'ac\'bb\'e1\'d6\'c3\'b6\'a5\'a3\'ac\'b7\'c5\'b5\'bd\'d7\'b4\'cc\'ac\'cc\'f5\'c9\'cf\'b7\'bd
\f0 \cf0 \
    \cf7 //ios6
\f2 \'d2\'d4\'c7\'b0\'a3\'ac\'d6\'bb\'d3\'d0
\f0 44
\f2 \'bb\'f2
\f0 88
\f2 \'b5\'c4\'b5\'bc\'ba\'bd\'cc\'f5\'cd\'bc\'c6\'ac\'a3\'ac
\f0 7
\f2 \'bf\'aa\'ca\'bc\'bf\'c9\'d2\'d4\'cc\'ed\'bc\'d3
\f0 64/128
\f2 \'b8\'df\'b6\'c8\'b5\'c4\'b5\'bc\'ba\'bd\'cc\'f5\'cd\'bc\'c6\'ac\'c1\'cb
\f0 \cf0 \
    \cf7 //
\f2 \'c9\'e8\'d6\'c3\'cf\'d4\'ca\'be\'bb\'f2\'ca\'d5\'c6\'f0\'b5\'bc\'ba\'bd\'cc\'f5
\f0 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab1155\pardirnatural

\f2 \cf0 \CocoaLigature1 \
\
\'cd\'ea\'c8\'ab\'b6\'a8\'d6\'c6\'b0\'b4\'c5\'a5\
\
\pard\tx1155\pardeftab1155\pardirnatural

\f0 \cf0 \CocoaLigature0  \cf7 //
\f2 \'cf\'c8\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6
\f0 button\cf0 \
    \cf4 UIButton\cf0  *leftB = [\cf4 UIButton\cf0  \cf10 buttonWithType\cf0 :\cf10 UIButtonTypeSystem\cf0 ];\
    leftB.\cf4 frame\cf0  = \cf10 CGRectMake\cf0 (\cf6 0\cf0 , \cf6 0\cf0 , \cf6 33\cf0 , \cf6 30\cf0 );\
    [leftB \cf10 setBackgroundImage\cf0 :[\cf4 UIImage\cf0  \cf10 imageNamed\cf0 :\cf11 @"main_left_nav"\cf0 ] \cf10 forState\cf0 :\cf10 UIControlStateNormal\cf0 ];\
    [leftB \cf10 addTarget\cf0 :\cf2 self\cf0  \cf10 action\cf0 :\cf2 @selector\cf0 (leftButtonClick) \cf10 forControlEvents\cf0 :\cf10 UIControlEventTouchUpInside\cf0 ];\
    \
    \cf7 //
\f2 \'d3\'c3\'d5\'e2\'b8\'f6
\f0 button
\f2 \'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6
\f0 UIBarButtonItem\cf0 \
    \cf4 UIBarButtonItem\cf0  *leftBar = [[\cf4 UIBarButtonItem\cf0  \cf10 alloc\cf0 ] \cf10 initWithCustomView\cf0 :leftB];\
    \cf7 //
\f2 \'c9\'e8\'d6\'c3\'d7\'f3\'b1\'df\'b5\'c4\'d7\'a8\'d3\'c3\'b0\'b4\'c5\'a5
\f0 \cf0 \
    \cf2 self\cf0 .\cf4 navigationItem\cf0 .\cf4 leftBarButtonItem\cf0  = leftBar;
\f2 \CocoaLigature1 \
\pard\pardeftab720\sl500
\cf0 \CocoaLigature0 \
\'b6\'a8\'d6\'c6\'d7\'f3\'d3\'d2\cf8 \CocoaLigature1 \'b5\'c4\'b0\'b4\'c5\'a5\'ca\'b1\'ba\'f2
\fs72 \cb12 \'d2\'aa\'d3\'c3
\f0\fs28 \cf0 \cb1 \CocoaLigature0  \cf2 self\cf0 .\cf4 navigationItem\cf0 .\cf4 leftBarButtonItem\

\f2 \cf0 \'b6\'f8\cb13 \'b2\'bb\'ca\'c7
\f0 \cb1  \cf2 \cb14 self\cf0 .navagetionController.\cf4 navigationItem\cf0 .\cf4 leftBarButtonItem,\

\f2 \cf0 \cb1 \'b1\'b3\'be\'b0
\f0 \
\pard\tx674\pardeftab674\pardirnatural
\cf0 [\cf2 self\cf0 .\cf4 navigationController\cf0 .\cf4 navigationBar\cf0  \cf15 setBackgroundImage\cf0 :[\cf5 UIImage\cf0  \cf15 imageNamed\cf0 :\cf11 @"menu_icon_profile@2x.png"\cf0 ] \cf15 forBarMetrics\cf0 :\cf10 UIBarMetricsDefault\cf0 ];\
\
\pard\pardeftab720\sl500

\f1 \cf8 \cb9 \CocoaLigature1 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\sl500

\f2 \cf8 \cb1 \'d7\'ee\'b6\'a5\'b2\'e3\'b5\'c4\'d2\'b3\'c3\'e6\'a3\'ac\'b5\'b1\'c7\'b0\'cf\'d4\'ca\'be\'b5\'c4\'d2\'b3\'c3\'e6
\f0 \cf0 \CocoaLigature0 \
\pard\tx674\pardeftab674\pardirnatural
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ,\cf2 readonly\cf0 ,\cf2 retain\cf0 ) \cf5 UIViewController\cf0  *topViewController; \cf7 // The top view controller on the stack.\cf0 \
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ,\cf2 readonly\cf0 ,\cf2 retain\cf0 ) \cf5 UIViewController\cf0  *visibleViewController; \cf7 // Return modal view controller if it exists. Otherwise the top view controller.\cf0 \

\f2 \'b5\'b1\'c7\'b0\'d5\'bb\'d6\'d0\'b5\'c4
\f0 viewControllerde 
\f2 \'ca\'fd\'c1\'bf\'a3\'ac\'b5\'b1\'bb\'d8\'b5\'bdroot\'b5\'c4\'ca\'b1\'ba\'f2\'be\'cd\'bb\'e1\'b1\'e4\'ce\'aa1\'a3\'ac\'c6\'e4\'cb\'fb\'b5\'c4\'d2\'b3\'c3\'e6\'b6\'bc\'bb\'e1\'ca\'cd\'b7\'c5\'b5\'f4
\f0 \
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ,\cf2 copy\cf0 ) \cf5 NSArray\cf0  *viewControllers; \cf7 // The current view controller stack.\cf0 \
- (\cf2 void\cf0 )setViewControllers:(\cf5 NSArray\cf0  *)viewControllers animated:(\cf2 BOOL\cf0 )animated \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 3\cf0 _0); \cf7 // If animated is YES, then simulate a push or pop depending on whether the new top view controller was previously in the stack.\cf0 \
\
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ,\cf2 getter\cf0 =isNavigationBarHidden) \cf2 BOOL\cf0  navigationBarHidden;\

\f2 \'d2\'fe\'b2\'d8\'b5\'bc\'ba\'bd\'c0\'b8
\f0 \
- (\cf2 void\cf0 )setNavigationBarHidden:(\cf2 BOOL\cf0 )hidden animated:(\cf2 BOOL\cf0 )animated; \
\cf7 // Hide or show the navigation bar. If animated, it will transition vertically using UINavigationControllerHideShowBarDuration.\cf0 \
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ,\cf2 readonly\cf0 ) \cf5 UINavigationBar\cf0  *navigationBar; \cf7 // The navigation bar managed by the controller. Pushing, popping or setting navigation items on a managed navigation bar is not supported.\cf0 \

\f2 \'c9\'e8\'d6\'c3
\f0 toolbar
\f2 \'a3\'bb
\f0 \
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ,\cf2 getter\cf0 =isToolbarHidden) \cf2 BOOL\cf0  toolbarHidden \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 3\cf0 _0); \cf7 // Defaults to YES, i.e. hidden.\cf0 \
- (\cf2 void\cf0 )setToolbarHidden:(\cf2 BOOL\cf0 )hidden animated:(\cf2 BOOL\cf0 )animated \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 3\cf0 _0); \cf7 // Hide or show the toolbar at the bottom of the screen. If animated, it will transition vertically using UINavigationControllerHideShowBarDuration.\
\
\cf0 \
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ,\cf2 readonly\cf0 ) \cf5 UIToolbar\cf0  *toolbar \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 3\cf0 _0); \cf7 // For use when presenting an action sheet.\cf0 \
\
\cf2 @property\cf0 (\cf2 nonatomic\cf0 , \cf2 assign\cf0 ) \cf2 id\cf0 <\cf5 UINavigationControllerDelegate\cf0 > delegate;\
\pard\pardeftab720\sl500

\f1 \cf8 \cb9 \CocoaLigature1 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx674\pardeftab674\pardirnatural

\f0 \cf0 \cb1 \CocoaLigature0 \
\cf2 @property\cf0 (\cf2 nonatomic\cf0 , \cf2 readonly\cf0 ) \cf5 UIGestureRecognizer\cf0  *interactivePopGestureRecognizer \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 7\cf0 _0);\
\
\
- (\cf2 void\cf0 )showViewController:(\cf5 UIViewController\cf0  *)vc sender:(\cf2 id\cf0 )sender \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 8\cf0 _0); \cf7 // Interpreted as pushViewController:animated:\cf0 \
\pard\pardeftab720\sl500

\f1 \cf8 \cb12 \CocoaLigature1 iOS8
\f2 \'d6\'d0\'bc\'d3\'c8\'eb\'b5\'c4\'d2\'bb\'d0\'a9\'ca\'d6\'ca\'c6\'bf\'c9\'d2\'d4\'d2\'fe\'b2\'d8\'b5\'bc\'ba\'bd\'c0\'b8
\f0 \cf0 \cb1 \CocoaLigature0 \
\pard\tx674\pardeftab674\pardirnatural
\cf16 /// When the keyboard appears, the navigation controller's navigationBar toolbar will be hidden. The bars will remain hidden when the keyboard dismisses, but a tap in the content area will show them.\cf0 \
\pard\tx674\pardeftab674\pardirnatural
\cf2 @property\cf0  (\cf2 nonatomic\cf0 , \cf2 readwrite\cf0 , \cf2 assign\cf0 ) \cf2 BOOL\cf0  hidesBarsWhenKeyboardAppears \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 8\cf0 _0);\
\pard\tx674\pardeftab674\pardirnatural
\cf16 /// When the user swipes, the navigation controller's navigationBar & toolbar will be hidden (on a swipe up) or shown (on a swipe down). The toolbar only participates if it has items.\cf0 \
\pard\tx674\pardeftab674\pardirnatural
\cf2 @property\cf0  (\cf2 nonatomic\cf0 , \cf2 readwrite\cf0 , \cf2 assign\cf0 ) \cf2 BOOL\cf0  hidesBarsOnSwipe \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 8\cf0 _0);\
\pard\tx674\pardeftab674\pardirnatural
\cf16 /// The gesture recognizer that triggers if the bars will hide or show due to a swipe. Do not change the delegate or attempt to replace this gesture by overriding this method.\cf0 \
\pard\tx674\pardeftab674\pardirnatural
\cf2 @property\cf0  (\cf2 nonatomic\cf0 , \cf2 readonly\cf0 , \cf2 retain\cf0 ) \cf5 UIPanGestureRecognizer\cf0  *barHideOnSwipeGestureRecognizer \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 8\cf0 _0);\
\pard\tx674\pardeftab674\pardirnatural
\cf16 /// When the UINavigationController's vertical size class is compact, hide the UINavigationBar and UIToolbar. Unhandled taps in the regions that would normally be occupied by these bars will reveal the bars.\cf0 \
\pard\tx674\pardeftab674\pardirnatural
\cf2 @property\cf0  (\cf2 nonatomic\cf0 , \cf2 readwrite\cf0 , \cf2 assign\cf0 ) \cf2 BOOL\cf0  hidesBarsWhenVerticallyCompact \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 8\cf0 _0);\
\pard\tx674\pardeftab674\pardirnatural
\cf16 /// When the user taps, the navigation controller's navigationBar & toolbar will be hidden or shown, depending on the hidden state of the navigationBar. The toolbar will only be shown if it has items to display.\cf0 \
\pard\tx674\pardeftab674\pardirnatural
\cf2 @property\cf0  (\cf2 nonatomic\cf0 , \cf2 readwrite\cf0 , \cf2 assign\cf0 ) \cf2 BOOL\cf0  hidesBarsOnTap \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 8\cf0 _0);\
\pard\tx674\pardeftab674\pardirnatural
\cf16 /// The gesture recognizer used to recognize if the bars will hide or show due to a tap in content. Do not change the delegate or attempt to replace this gesture by overriding this method.\cf0 \
\pard\tx674\pardeftab674\pardirnatural
\cf2 @property\cf0  (\cf2 nonatomic\cf0 , \cf2 readonly\cf0 , \cf2 assign\cf0 ) \cf5 UITapGestureRecognizer\cf0  *barHideOnTapGestureRecognizer \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 8\cf0 _0);\
\pard\pardeftab720\sl500

\f1 \cf8 \cb9 \CocoaLigature1 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f0 \cf0 \cb1 \CocoaLigature0 \
\pard\tx674\pardeftab674\pardirnatural
\cf2 @end\cf0 \
\
\cf2 @protocol\cf0  \cf5 UIViewControllerInteractiveTransitioning\cf0 ;\
\cf2 @protocol\cf0  \cf5 UIViewControllerAnimatedTransitioning\cf0 ;\
\
\cf2 @protocol\cf0  UINavigationControllerDelegate <\cf5 NSObject\cf0 >\
\
\cf2 @optional\cf0 \
\
\cf7 // Called when the navigation controller shows a new top view controller via a push, pop or setting of the view controller stack.\cf0 \
- (\cf2 void\cf0 )navigationController:(\cf5 UINavigationController\cf0  *)navigationController willShowViewController:(\cf5 UIViewController\cf0  *)viewController animated:(\cf2 BOOL\cf0 )animated;\
- (\cf2 void\cf0 )navigationController:(\cf5 UINavigationController\cf0  *)navigationController didShowViewController:(\cf5 UIViewController\cf0  *)viewController animated:(\cf2 BOOL\cf0 )animated;\
\
- (\cf4 NSUInteger\cf0 )navigationControllerSupportedInterfaceOrientations:(\cf5 UINavigationController\cf0  *)navigationController \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 7\cf0 _0);\
- (\cf4 UIInterfaceOrientation\cf0 )navigationControllerPreferredInterfaceOrientationForPresentation:(\cf5 UINavigationController\cf0  *)navigationController \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 7\cf0 _0);\
\
- (\cf2 id\cf0  <\cf5 UIViewControllerInteractiveTransitioning\cf0 >)navigationController:(\cf5 UINavigationController\cf0  *)navigationController\
                          interactionControllerForAnimationController:(\cf2 id\cf0  <\cf5 UIViewControllerAnimatedTransitioning\cf0 >) animationController \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 7\cf0 _0);\
\
- (\cf2 id\cf0  <\cf5 UIViewControllerAnimatedTransitioning\cf0 >)navigationController:(\cf5 UINavigationController\cf0  *)navigationController\
                                   animationControllerForOperation:(\cf4 UINavigationControllerOperation\cf0 )operation\
                                                fromViewController:(\cf5 UIViewController\cf0  *)fromVC\
                                                  toViewController:(\cf5 UIViewController\cf0  *)toVC  \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 7\cf0 _0);\
\
\cf2 @end\cf0 \
\
\cf2 @interface\cf0  UIViewController (UINavigationControllerItem)\
\
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ,\cf2 readonly\cf0 ,\cf2 retain\cf0 ) \cf5 UINavigationItem\cf0  *navigationItem; \cf7 // Created on-demand so that a view controller may customize its navigation appearance.\cf0 \
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ) \cf2 BOOL\cf0  hidesBottomBarWhenPushed; \cf7 // If YES, then when this view controller is pushed into a controller hierarchy with a bottom bar (like a tab bar), the bottom bar will slide out. Default is NO.\cf0 \
\cf2 @property\cf0 (\cf2 nonatomic\cf0 ,\cf2 readonly\cf0 ,\cf2 retain\cf0 ) \cf5 UINavigationController\cf0  *navigationController; \cf7 // If this view controller has been pushed onto a navigation controller, return it.\cf0 \
\
\cf2 @end\cf0 \
\
\cf2 @interface\cf0  UIViewController (UINavigationControllerContextualToolbarItems)\
\
\cf2 @property\cf0  (\cf2 nonatomic\cf0 , \cf2 retain\cf0 ) \cf5 NSArray\cf0  *toolbarItems \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 3\cf0 _0);\
- (\cf2 void\cf0 )setToolbarItems:(\cf5 NSArray\cf0  *)toolbarItems animated:(\cf2 BOOL\cf0 )animated \cf3 NS_AVAILABLE_IOS\cf0 (\cf6 3\cf0 _0);\
\
\cf2 @end\cf0 \
}