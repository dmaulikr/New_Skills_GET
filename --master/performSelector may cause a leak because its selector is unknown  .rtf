{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green29\blue31;\red255\green255\blue255;\red87\green96\blue105;
\red11\green96\blue192;\red13\green0\blue129;\red235\green236\blue237;\red36\green38\blue41;\red37\green127\blue159;
\red104\green26\blue29;\red43\green39\blue19;\red8\green69\blue135;\red205\green208\blue212;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl640\sa220\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown"}}{\fldrslt 
\f0\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 performSelector may cause a leak because its selector is unknown}}
\f0\b\fs44 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl300\partightenfactor0

\b0\fs26 \cf2 \
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat3 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth920\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr300 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth13200\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl460\qc\partightenfactor0

\fs40 \cf4 \strokec4 992\
\pard\intbl\itap1\pardeftab720\sl20\qc\partightenfactor0

\fs2 \cf5 \strokec5 down vote\
\pard\intbl\itap1\pardeftab720\sl20\qc\partightenfactor0
\cf4 \strokec4 accepted\cell 
\pard\intbl\itap1\pardeftab720\sl480\sa380\partightenfactor0

\fs38 \cf2 \strokec2 Solution\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\fs30 \cf2 The compiler is warning about this for a reason. It's very rare that this warning should simply be ignored, and it's easy to work around. Here's how:\
\pard\intbl\itap1\pardeftab720\sl320\partightenfactor0

\f1\fs26 \cf6 \cb7 \strokec6 if\cf8 \strokec8  (!_controller) \{ \cf6 \strokec6 return\cf8 \strokec8 ; \}\
SEL selector = \cf9 \strokec9 NSSelectorFromString\cf8 \strokec8 (@\cf10 \strokec10 "someMethod"\cf8 \strokec8 );\
IMP imp = [_controller methodForSelector:selector];\
\cf6 \strokec6 void\cf8 \strokec8  (*func)(id, SEL) = (\cf6 \strokec6 void\cf8 \strokec8  *)imp;\
func(_controller, selector);\cf11 \strokec11 \
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\f0\fs30 \cf2 \cb1 \strokec2 Or more tersely (though hard to read & without the guard):\
\pard\intbl\itap1\pardeftab720\sl320\partightenfactor0

\f1\fs26 \cf8 \cb7 \strokec8 SEL selector = \cf9 \strokec9 NSSelectorFromString\cf8 \strokec8 (@\cf10 \strokec10 "someMethod"\cf8 \strokec8 );\
((\cf6 \strokec6 void\cf8 \strokec8  (*)(id, SEL))[_controller methodForSelector:selector])(_controller, selector);\cf11 \strokec11 \
\pard\intbl\itap1\pardeftab720\sl480\sa380\partightenfactor0

\f0\fs38 \cf2 \cb1 \strokec2 Explanation\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\fs30 \cf2 What's going on here is you're asking the controller for the C function pointer for the method corresponding to the controller. All 
\f1\fs26 \cb7 NSObject
\f0\fs30 \cb1 s respond to 
\f1\fs26 \cb7 methodForSelector:
\f0\fs30 \cb1 , but you can also use 
\f1\fs26 \cb7 class_getMethodImplementation
\f0\fs30 \cb1  in the Objective-C runtime (useful if you only have a protocol reference, like 
\f1\fs26 \cb7 id<SomeProto>
\f0\fs30 \cb1 ). These function pointers are called 
\f1\fs26 \cb7 IMP
\f0\fs30 \cb1 s, and are simple
\f1\fs26 \cb7 typedef
\f0\fs30 \cb1 ed function pointers (
\f1\fs26 \cb7 id (*IMP)(id, SEL, ...)
\f0\fs30 \cb1 )
\fs24 \super 1
\fs30 \nosupersub . This may be close to the actual method signature of the method, but will not always match exactly.\
Once you have the 
\f1\fs26 \cb7 IMP
\f0\fs30 \cb1 , you need to cast it to a function pointer that includes all of the details that ARC needs (including the two implicit hidden arguments 
\f1\fs26 \cb7 self
\f0\fs30 \cb1  and 
\f1\fs26 \cb7 _cmd
\f0\fs30 \cb1  of every Objective-C method call). This is handled in the third line (the 
\f1\fs26 \cb7 (void *)
\f0\fs30 \cb1  on the right hand side simply tells the compiler that you know what you're doing and not to generate a warning since the pointer types don't match).\
Finally, you call the function pointer
\fs24 \super 2
\fs30 \nosupersub .\
\pard\intbl\itap1\pardeftab720\sl480\sa380\partightenfactor0

\fs38 \cf2 Complex Example\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\fs30 \cf2 When the selector takes arguments or returns a value, you'll have to change things a bit:\
\pard\intbl\itap1\pardeftab720\sl320\partightenfactor0

\f1\fs26 \cf8 \cb7 \strokec8 SEL selector = \cf9 \strokec9 NSSelectorFromString\cf8 \strokec8 (@\cf10 \strokec10 "processRegion:ofView:"\cf8 \strokec8 );\
IMP imp = [_controller methodForSelector:selector];\
\pard\intbl\itap1\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 CGRect\cf8 \strokec8  (*func)(id, SEL, \cf9 \strokec9 CGRect\cf8 \strokec8 , \cf9 \strokec9 UIView\cf8 \strokec8  *) = (\cf6 \strokec6 void\cf8 \strokec8  *)imp;\
\cf9 \strokec9 CGRect\cf8 \strokec8  result = _controller ?\
  func(_controller, selector, someRect, someView) : \cf9 \strokec9 CGRectZero\cf8 \strokec8 ;\cf11 \strokec11 \
\pard\intbl\itap1\pardeftab720\sl480\sa380\partightenfactor0

\f0\fs38 \cf2 \cb1 \strokec2 Reasoning for Warning\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\fs30 \cf2 The reason for this warning is that with ARC, the runtime needs to know what to do with the result of the method you're calling. The result could be anything: 
\f1\fs26 \cb7 void
\f0\fs30 \cb1 , 
\f1\fs26 \cb7 int
\f0\fs30 \cb1 , 
\f1\fs26 \cb7 char
\f0\fs30 \cb1 , 
\f1\fs26 \cb7 NSString *
\f0\fs30 \cb1 , 
\f1\fs26 \cb7 id
\f0\fs30 \cb1 , etc. ARC normally gets this information from the header of the object type you're working with.
\fs24 \super 3
\fs30 \nosupersub \
There are really only 4 things that ARC would consider for the return value:
\fs24 \super 4
\fs30 \nosupersub \
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\sl380\sa150\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Ignore non-object types (
\f1\fs26 \cb7 void
\f0\fs30 \cb1 , 
\f1\fs26 \cb7 int
\f0\fs30 \cb1 , etc)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Retain object value, then release when it is no longer used (standard assumption)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Release new object values when no longer used (methods in the 
\f1\fs26 \cb7 init
\f0\fs30 \cb1 / 
\f1\fs26 \cb7 copy
\f0\fs30 \cb1  family or attributed with 
\f1\fs26 \cb7 ns_returns_retained
\f0\fs30 \cb1 )\
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\sl380\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do nothing & assume returned object value will be valid in local scope (until inner most release pool is drained, attributed with 
\f1\fs26 \cb7 ns_returns_autoreleased
\f0\fs30 \cb1 )\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0
\cf2 The call to 
\f1\fs26 \cb7 methodForSelector:
\f0\fs30 \cb1  assumes that the return value of the method it's calling is an object, but does not retain/release it. So you could end up creating a leak if your object is supposed to be released as in #3 above (that is, the method you're calling returns a new object).\
For selectors you're trying to call that return 
\f1\fs26 \cb7 void
\f0\fs30 \cb1  or other non-objects, you could enable compiler features to ignore the warning, but it may be dangerous. I've seen Clang go through a few iterations of how it handles return values that aren't assigned to local variables. There's no reason that with ARC enabled that it can't retain and release the object value that's returned from 
\f1\fs26 \cb7 methodForSelector:
\f0\fs30 \cb1  even though you don't want to use it. From the compiler's perspective, it is an object after all. That means that if the method you're calling, 
\f1\fs26 \cb7 someMethod
\f0\fs30 \cb1 , is returning a non object (including 
\f1\fs26 \cb7 void
\f0\fs30 \cb1 ), you could end up with a garbage pointer value being retained/released and crash.\
\pard\intbl\itap1\pardeftab720\sl480\sa380\partightenfactor0

\fs38 \cf2 Additional Arguments\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\fs30 \cf2 One consideration is that this is the same warning will occur with 
\f1\fs26 \cb7 performSelector:withObject:
\f0\fs30 \cb1 and you could run into similar problems with not declaring how that method consumes parameters. ARC allows for declaring {\field{\*\fldinst{HYPERLINK "http://clang.llvm.org/docs/AutomaticReferenceCounting.html#consumed-parameters"}}{\fldrslt \cf12 \strokec12 consumed parameters}}, and if the method consumes the parameter, you'll probably eventually send a message to a zombie and crash. There are ways to work around this with bridged casting, but really it'd be better to simply use the 
\f1\fs26 \cb7 IMP
\f0\fs30 \cb1  and function pointer methodology above. Since consumed parameters are rarely an issue, this isn't likely to come up.\
\pard\intbl\itap1\pardeftab720\sl480\sa380\partightenfactor0

\fs38 \cf2 Static Selectors\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\fs30 \cf2 Interestingly, the compiler will not complain about selectors declared statically:\
\pard\intbl\itap1\pardeftab720\sl320\partightenfactor0

\f1\fs26 \cf8 \cb7 \strokec8 [_controller performSelector:\cf10 \strokec10 @selector\cf8 \strokec8 (someMethod)];\cf11 \strokec11 \
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\f0\fs30 \cf2 \cb1 \strokec2 The reason for this is because the compiler actually is able to record all of the information about the selector and the object during compilation. It doesn't need to make any assumptions about anything. (I checked this a year a so ago by looking at the source, but don't have a reference right now.)\
\pard\intbl\itap1\pardeftab720\sl480\sa380\partightenfactor0

\fs38 \cf2 Suppression\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\fs30 \cf2 In trying to think of a situation where suppression of this warning would be necessary and good code design, I'm coming up blank. Someone please share if they have had an experience where silencing this warning was necessary (and the above doesn't handle things properly).\
\pard\intbl\itap1\pardeftab720\sl480\sa380\partightenfactor0

\fs38 \cf2 More\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\fs30 \cf2 It's possible to build up an 
\f1\fs26 \cb7 NSMethodInvocation
\f0\fs30 \cb1  to handle this as well, but doing so requires a lot more typing and is also slower, so there's little reason to do it.\
\pard\intbl\itap1\pardeftab720\sl480\sa380\partightenfactor0

\fs38 \cf2 History\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0

\fs30 \cf2 When the 
\f1\fs26 \cb7 performSelector:
\f0\fs30 \cb1  family of methods was first added to Objective-C, ARC did not exist. While creating ARC, Apple decided that a warning should be generated for these methods as a way of guiding developers toward using other means to explicitly define how memory should be handled when sending arbitrary messages via a named selector. In Objective-C, developers are able to do this by using C style casts on raw function pointers.\
With the introduction of Swift, Apple {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_38"}}{\fldrslt \cf12 \strokec12 has documented}} the 
\f1\fs26 \cb7 performSelector:
\f0\fs30 \cb1  family of methods as "inherently unsafe" and they are not available to Swift.\
Over time, we have seen this progression:\
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\sl380\sa150\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Early versions of Objective-C allow 
\f1\fs26 \cb7 performSelector:
\f0\fs30 \cb1  (manual memory management)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Objective-C with ARC warns for use of 
\f1\fs26 \cb7 performSelector:
\f0\fs30 \cb1 \
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\sl380\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Swift does not have access to 
\f1\fs26 \cb7 performSelector:
\f0\fs30 \cb1  and documents these methods as "inherently unsafe"\
\pard\intbl\itap1\pardeftab720\sl380\sa300\partightenfactor0
\cf2 The idea of sending messages based on a named selector is not, however, an "inherently unsafe" feature. This idea has been used successfully for a long time in Objective-C as well as many other programming languages.\
\pard\intbl\itap1\pardeftab720\sl380\sa400\partightenfactor0
\cf13 \cb13 \strokec13 \
\pard\intbl\itap1\pardeftab720\sl300\sa300\partightenfactor0

\fs24 \cf2 \cb1 \super \strokec2 1
\fs30 \nosupersub  All Objective-C methods have two hidden arguments, 
\f1\fs26 \cb7 self
\f0\fs30 \cb1  and 
\f1\fs26 \cb7 _cmd
\f0\fs30 \cb1  that are implicitly added when you call a method.\

\fs24 \super 2
\fs30 \nosupersub  Calling a 
\f1\fs26 \cb7 NULL
\f0\fs30 \cb1  function is not safe in C. The guard used to check for the presence of the controller ensures that we have an object. We therefore know we'll get an 
\f1\fs26 \cb7 IMP
\f0\fs30 \cb1  from 
\f1\fs26 \cb7 methodForSelector:
\f0\fs30 \cb1  (though it may be 
\f1\fs26 \cb7 _objc_msgForward
\f0\fs30 \cb1 , entry into the message forwarding system). Basically, with the guard in place, we know we have a function to call.\

\fs24 \super 3
\fs30 \nosupersub  Actually, it's possible for it to get the wrong info if declare you objects as 
\f1\fs26 \cb7 id
\f0\fs30 \cb1  and you're not importing all headers. You could end up with crashes in code that the compiler thinks is fine. This is very rare, but could happen. Usually you'll just get a warning that it doesn't know which of two method signatures to choose from.\

\fs24 \super 4
\fs30 \nosupersub  See the ARC reference on {\field{\*\fldinst{HYPERLINK "http://clang.llvm.org/docs/AutomaticReferenceCounting.html#retained-return-values"}}{\fldrslt \cf12 \strokec12 retained return values}} and {\field{\*\fldinst{HYPERLINK "http://clang.llvm.org/docs/AutomaticReferenceCounting.html#unretained-return-values"}}{\fldrslt \cf12 \strokec12 unretained return values}} for more details.\cell \lastrow\row
}